JSInclude
=========
	This plugin helps to ease the difficulty of maintainning javascript dependency.
	
	Features
		1. Simple to use.
		2. Provide easy way to deal with mass js files.
		3. Include production support
			( automatically merge and compress js files into single file, see example 3 )
		
	If your project is using RIA and has many js files, this plugins will helps!
	Please read "TO-DO" before you use it.
	
	
Install
=======
	As plugin:
		cd your_project
		script/plugin install git://github.com/sxlee87/JSInclude.git
	
Example 1 - Simple to use
=========================
	You hava a javascript file named: c.js.
	To use it, it required another two file named: a.js, b.js.
	The most way you do is use "javascript_include_tag" in erb file :
		<%= javascript_include_tag 'a.js'%>
		<%= javascript_include_tag 'b.js'%>
		<%= javascript_include_tag 'c.js'%>
	
	With JSInclude, you can do the same thing like this:
		1. Add the following comment in c.js:
		//@include a.js
		//@include b.js
		
		2. Add JSInclue helper in application_controller.rb:
		helper JSInclude::Helper
		
		3. Replace the javascript_include_tags with :
		<%= js_include 'c.js' %>
		
Example 2 - For RIA
===================
	RIA project brings more and more js files, and their relationship may be complex.
	For example:
		( A -> B : mesans A require B  )
		B -> A
		C -> A
		D -> C,B 
		
	It sucks if maintain in usual way( as example 1 shows ):
		1. You have to maintain the dependency in your own!( by writing the javascript_include_tags )
		2. May have Duplication!( if D is frequent used )
		3. It was difficult to figure out the dependency!( You don't know C require A by only watching the C file. )
		
	Problems can be solve by organizing the files in this way with JSInclude:
		B.js:
		//@include A.js
		C.js:
		//@include A.js
		D.js:
		//@include B.js
		//@include C.js
	Now:
		1. You don't have to maintain the dependency, JSInclude will do it.
		2. No duplication, just include one file you use.( User js_include "D.js" )
		3. In any file, you know what it require.( Through the "@include" tag )
		
Example 3 - Production support
==============================
	Add config into your environment.rb:
		JSInclude.enable_production = true  if RAILS_ENV == "production"
	This will turn JSInclude into production, it will:
		1. Merge all required files into single js file
		2. Compress the single file with YUI-Compressor(version : 2.4.2)
	
	Example :
		Given
			a.js:
			true ? true : false ;
			b.js:
			//@include a.js
			alert("hello");
		When 
			<%= js_include "b.js" %>
		Then it will be 
			<%= javascript_include_tag 'b_compressed.js'%>
			b_compressed.js :
				true?true:false;alert("hello")
	
	Others:
		1. The default folder to store compressed files is : public/js_include_cached.
		   Modity JSInclude.base_path and JSInclude.cache_dir_name to change it
		2. When first boot production server, it will take times to redo merger becauser of the cache data was lost.
		
		
How it works
============
	Finding denpendency:
	By using helper "js_include", the plugin will scan the file for "@include" tag, and extract the file it need.
	It will dig into each file until the end, and find out all files with correct order.
	Finally, it will generate <script> tag with these files.

TO-DO
=====
	More test in production.
	Create public/js_include_cached when not exists
	
Contact
=======
	Blog: www.sxlee.com 
	Mail: sxlee87@gmail.com

Copyright (c) 2009 [JSInclude], released under the MIT license
